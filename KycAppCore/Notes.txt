Application Core 

Ports/Adapters 
    In Ports (presented as interfaces):
        IAchievement (GetAchievmentFor(CustomerId))
        IContactVerfication (GetVerification(CustomerId))
        IIdentification (GetAssessment(CustomerId))
        ILoayalityProfiler (GetProfile(CustomerId))
        IActivityTracer (StartTracing(CustomerGroupSpecification), StopTracing())
            you will receive alerts for all customers
        

    Controller is part of UI 
        Does also the boot strapping
    Stream is Adapter (Observable is provided by Adapter)
    There is also an outgoing stream (maybe grpc API -> feature live monitoring stream)
        
    Specflow tests 
        Are setting adapters for testing
        One adapter that can act as a mock stream
        One adapter that can act as a client code (this is an input adapter and therefore the AppCore emits a
        domain entity like for instance LoyaltyProfile <- DomainClass) to the AppCore
    
Man muss von innen nach aussen arbeiten
Nichts passiert ohne Motivation von Business Seite her
Business sagt an

Use case:
Determine Customer's Loyalty Points (maybe we call it Loyalty Profile):
The point allow a ranking to give a bonus to the 100 most loyal customers
    Rules
        *) Registration since one year mandatory (otherwise we set the loyalty to 0)
        *) Sum of purchases higher than 100 € +10 (formula depending on the amount e.g.: amount/10)
        *) At least one purchase higher than 10€ in the last month +5
          

Further ideas:
We could get a trend for the profile (up, neutral, down)
Activity Graph showing whether the activity of a customer in-, decreases or remains constant
We could use an inversion of control container here
The ActivityStoreTestAdapter could provide an operation for registering events
Make a summary slide with takeaways
Contactability as new domain object.


TODOS:
Configure Rider Coding Convention Properly
Make Method Consume async in ICustomerActivityStore
Set Tags to specs (at the moment it defaults to @myTag) 
Stored customerId in scenrio->contextStepDefinitions
Cleanup DateTime.Now.Add(.1) with Yesterday
Input validation in Specflow (regex for inter parameter)

Sessionplan:
    1.) Introduction
    2.) Show a user story for the feature
    2.) Implement LoyaltyProfile function for calculating price out of purchase amount by creating a new scenario
        - the specflow binding will be commented out -> first step is comment it in 
        - maybe we also create the Purchase record on demand by the IDE (at the moment not very well supported
                solution found: Create record in test and then -> move record to other project)
        - Let the tests run and fail because of missing implementation
    3.) Implement the solution (do the minimum that is required to get the test green) 
    4.) Fix additional edge cases, caused by infrastructure problems, with unit tests 
    5.) Raise problem with multiple purchases suming up to the required amount (maybe cancellations as well)
        (You don't want to have this in living documentation -> go better with a unit test)
    *) Implement UnkownUser as first fix
    
Slides 
    Title
    Introduction of speaker
    Introduction of the domain
    Introduction of the architecture by example
    And we start

Introduction 15 minutes

30 Minutes coding

5 minutes takeaways
10 minutes QA    
    
Takeaways:
    *) USe single assertions in spceflow as it is better understanding for business and living documentation
    *) Code coverage should be higher in hexagonal architecture
    *) Make specflow very readable so that testers can create step definitions.
    *) The hexagonal architecture makes onboarding very difficult 
    

    

